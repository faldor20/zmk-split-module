/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>

/ {
    combos {
        compatible = "zmk,combos";

        colemak {
            bindings = <&tog 1>;
            key-positions = <10 14 15 19>;
            require-prior-idle-ms = <200>;
        };

        one-hand-toggle {
            bindings = <&tog 1>;
            key-positions = <17 15 19>;
            require-prior-idle-ms = <200>;
        };

        fkeys {
            bindings = <&sl 3>;
            key-positions = <15 19>;
        };

        underscore {
            bindings = <&kp UNDER>;
            key-positions = <16 18>;
            require-prior-idle-ms = <200>;
        };

        rt2 {
            bindings = <&kp MINUS>;
            key-positions = <17 16>;
            require-prior-idle-ms = <200>;
        };

        rb2 {
            bindings = <&kp PLUS>;
            key-positions = <26 27>;
            require-prior-idle-ms = <200>;
        };

        tilde {
            bindings = <&kp TILDE>;
            key-positions = <12 13>;
            require-prior-idle-ms = <200>;
        };

        eq {
            bindings = <&kp EQUAL>;
            key-positions = <6 7>;
            require-prior-idle-ms = <200>;
            timeout-ms = <80>;
        };

        semi2 {
            bindings = <&kp SEMI>;
            key-positions = <7 8>;
            timeout-ms = <80>;
            require-prior-idle-ms = <200>;
        };

        and {
            bindings = <&kp AMPS>;
            key-positions = <2 3>;
            timeout-ms = <80>;
            require-prior-idle-ms = <200>;
        };

        backslash {
            bindings = <&kp BACKSLASH>;
            key-positions = <23 22>;
            timeout-ms = <80>;
            require-prior-idle-ms = <200>;
        };

        pipe {
            bindings = <&pipe>;
            key-positions = <11 13>;
            timeout-ms = <80>;
            require-prior-idle-ms = <200>;
        };

        paren {
            bindings = <&kp LEFT_PARENTHESIS>;
            key-positions = <11 12>;
            timeout-ms = <80>;
            require-prior-idle-ms = <200>;
        };

        bracket {
            bindings = <&kp LEFT_BRACKET>;
            key-positions = <21 22>;
            timeout-ms = <80>;
            require-prior-idle-ms = <200>;
        };

        arrow {
            bindings = <&arrow>;
            key-positions = <21 23>;
            timeout-ms = <80>;
            require-prior-idle-ms = <200>;
        };

        star {
            bindings = <&kp STAR>;
            key-positions = <17 18>;
            timeout-ms = <80>;
            require-prior-idle-ms = <200>;
        };

        vol_up {
            bindings = <&kp C_VOL_UP>;
            key-positions = <3 4>;
            timeout-ms = <80>;
            require-prior-idle-ms = <200>;
        };

        vol_down {
            bindings = <&kp C_VOL_DN>;
            key-positions = <13 14>;
            timeout-ms = <80>;
            require-prior-idle-ms = <200>;
        };

        play_pause {
            bindings = <&kp K_PLAY_PAUSE>;
            key-positions = <23 24>;
            timeout-ms = <80>;
            require-prior-idle-ms = <200>;
        };
    };

    behaviors {
        capsctr: capsctr {
            compatible = "zmk,behavior-hold-tap";
            label = "CAPSCTR";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
            flavor = "balanced";
            quick-tap-ms = <50>;
            require-prior-idle-ms = <125>;
            retro-tap;
        };

        left_hr_mods: left_hr_mods {
            compatible = "zmk,behavior-hold-tap";
            label = "LEFT_HR_MODS";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <150>;
            flavor = "tap-preferred";
            require-prior-idle-ms = <150>;
            quick-tap-ms = <170>;
            hold-trigger-key-positions = <5 15 25 16 6 8 5 6 7 8 9 15 16 17 18 19 25 26 27 28 29 33 34 35 32 31 30>;
            retro-tap;
        };

        right_hr_mods: right_hr_mods {
            compatible = "zmk,behavior-hold-tap";
            label = "RIGHT_HR_MODS";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <150>;
            flavor = "tap-preferred";
            require-prior-idle-ms = <150>;
            quick-tap-ms = <170>;
            hold-trigger-key-positions = <0 1 3 4 10 11 12 13 14 20 21 22 23 24 2 30 31 32 33 34 35>;
            retro-tap;
        };

        hold_or_tap_press: hold_or_tap_press {
            compatible = "zmk,behavior-hold-tap";
            label = "HOLD_OR_TAP_PRESS";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <150>;
            flavor = "balanced";
        };
    };

    macros {
        pipe: pipe {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp PIPE &kp GREATER_THAN>;
            label = "PIPE";
        };

        arrow: arrow {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp MINUS &kp GT>;
            label = "ARROW";
        };
    };

    keymap {
        compatible = "zmk,keymap";

        // This is a sample keymap intended to be replaced with your own

        base_layer {
            bindings = <
  &kp Q             &kp W  &kp E                  &kp R                    &kp T           &kp Y                 &kp U                          &kp I       &kp O    &kp P
  &kp A             &kp S  &kp D                  &kp F                    &kp G           &kp H                 &kp J                          &kp K       &kp L    &kp SEMI
  &capsctr LCTRL Z  &kp X  &kp C                  &kp V                    &kp B           &kp N                 &kp M                          &kp COMMA   &kp DOT  &kp SLASH
                           &capsctr LEFT_ALT TAB  &capsctr LEFT_WIN SPACE  &lt 2 ESCAPE    &capsctr RCTRL ENTER  &capsctr LEFT_SHIFT BACKSPACE  &kp ESCAPE
            >;
        };

        layer_1 {
            bindings = <
  &kp Q                     &kp W                     &kp F                  &kp P                       &kp B     &kp J   &kp L                        &kp U                       &kp Y                            &hold_or_tap_press SEMI APOS
  &kp A                     &kp R                     &kp S                  &kp T                       &kp G     &kp M   &kp N                        &kp E                       &kp I                            &kp O
  &left_hr_mods LEFT_WIN Z  &left_hr_mods LEFT_ALT X  &left_hr_mods LCTRL C  &left_hr_mods LEFT_SHIFT D  &kp V     &kp K   &right_hr_mods LEFT_SHIFT H  &right_hr_mods RCTRL COMMA  &right_hr_mods RIGHT_ALT PERIOD  &right_hr_mods RIGHT_WIN SLASH
                                                      &trans                 &trans                      &trans    &trans  &trans                       &trans
            >;
        };

        layer_2 {
            bindings = <
  &kp N1                         &kp N2                                &kp N3                           &kp N4                                         &kp N5       &kp N6        &kp N7                                &kp N8                          &kp N9       &kp N0
  &kp GRAVE                      &kp LEFT_BRACKET                      &kp LEFT_BRACE                   &kp LS(LPAR)                                   &kp UNDER    &kp EQUAL     &kp LEFT                              &kp DOWN                        &kp UP       &kp RIGHT
  &left_hr_mods LEFT_WIN DELETE  &left_hr_mods LEFT_ALT RIGHT_BRACKET  &left_hr_mods LCTRL RIGHT_BRACE  &left_hr_mods LEFT_SHIFT KP_RIGHT_PARENTHESIS  &kp MINUS    &kp ASTERISK  &right_hr_mods RIGHT_SHIFT BACKSLASH  &right_hr_mods RCTRL PAGE_DOWN  &kp PAGE_UP  &right_hr_mods RIGHT_WIN SEMI
                                                                       &trans                           &trans                                         &trans       &trans        &trans                                &trans
            >;
        };

        layer_3 {
            bindings = <
  &kp F1   &kp F2   &kp F3  &kp F4  &kp F5    &kp F6  &kp F7  &kp F8      &kp F9  &kp F10
  &kp F11  &kp F12  &trans  &trans  &trans    &trans  &trans  &kp DELETE  &trans  &trans
  &trans   &trans   &trans  &trans  &trans    &trans  &trans  &trans      &trans  &trans
                    &trans  &trans  &trans    &trans  &trans  &trans
            >;
        };
    };
};
